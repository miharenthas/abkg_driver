//Header file for the "gen_bkg_from_histo" root script
//The script converts ABKG output files that has been converted
//into ROOT files and outputs an ASCII text file (huge), to be fed
//into the ASCII generator of R3BRoot.

/**********************************************************
//Originally written by: Dr. Dominic Rossi.
//On: ???
//Updated by: Lorenzo Zanetti
//On: 12.2016
**********************************************************/

#ifndef __GEN_BKG_FROM_HISTO_H__
#define __GEN_BKG_FROM_HISTO_H__

#include <stdio.h>
#include <stdarg.h>

#include <iostream>
#include <fstream>
#include <vector>

#include "TROOT.h"
#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TMath.h"
#include "TRandom3.h"
#include "TVector3.h"

//define 2*pi, useful to avoid one multiplication
#define _GEN_BKG_TAU 6.283185307179586 //in double precision

//define some default values
#define _GEN_BKG_DEF_EVNTS 1000000
#define _GEN_BKG_DEF_TOT_CS 1e4
#define _GEN_BKG_DEF_THICKNESS 0.519
#define _GEN_BKG_DEF_DENSITY 11.35
#define _GEN_BKG_DEF_MOLMASS 207.2 //lead...

//------------------------------------------------------------------------------------
//helpful datatypes:

//a structure holding the options for the generator.
typedef struct _generator_option_holder {
	TH2 *histo; //a pointer to a 2D histogram containing the data points
	            //This is usually "h1" in the ABKG converted output, but
	            //works also with "h2".
	FILE *output_target; //where to output the ASCII text
	Bool_t is_pipe; //flag a pipe instead of a file
	Int_t evnts; //maximum number of event generated
	Double_t tot_cs; //??
	Double_t target_thickness; //Thickness of the target (g/cm^2)
	Double_t target_density; //Density of the target
	Double_t target_molmass; //molar mass of the target (Lead is default)
	Bool_t debug; // debugging output
	Bool_t verbose; //verbosity flag.
} gen_bkg_opts;

//a holder for all the histograms generated by the function
typedef struct _generator_histogram_holder {
	TH1F *h_int; //interaction points
	TH1F *h_dist; //distances between the inteaction points (mean free path?)
	TH1F *h_mult; //pultiplicity of the event
	TH1F *h_mult_g; //multiplicity of the generated gammas
	TH2F *h_sim; //simulated events
} gen_bkg_hists;

//just to avoid having to parse a string (which is dumb)
//let's introduce a format switcher datatype.
typedef enum _generator_option_format{
	END_OF_FORMAT = '@', //format terminator
	HISTO, //signals a histo argument, character A
	A_PIPE, //signals a pipe argument, character B
	A_FILE, //signals a file argument, character C
	        //NOTE: this is an unelegant way to
	        //      avoid closing pipes with fclose
	        //      and thus avoid file-ID leakage
	EVNTS, //signals a evnts argument, character D
	TOT_CS, //signals a tot_cs argument, character E
	TARGET_THICKNESS, //signals a target_thickness argument, character F
	TARGET_DENSITY, //signals a target_density argument, character G
	TARGET_MOLMASS, //signals a targer_molmass argument, character H
	DEBUG, //signals a debug flag, character I
	VERBOSE //signals a verbose flag, character J
} gen_bkg_fmt;

//------------------------------------------------------------------------------------
//functions:

//the one and only, the generator
void gen_bkg_from_histo( gen_bkg_opts &go );

//an helper to populate the options
/*************************************************************************************
//                             NOTE ON THE FORMAT STRING
//The format string is an array of "gen_bkg_fmt" with the **names** of the arguments as parameter.
//it is split and parsed that way, obviously in order. So, to set "histo" and "envts"
//the format string looks like:
//                            format[] = {HISTO,EVNTS,END_OF_FORMAT};
//                            format[] = {'A','D','@'};
//                            *format = gen_bkg_option_string( L"AD@" );
//and the optional arguments are a pointer to a TH2 and an integer.
//As with any string(-sh), it has to be terminated (END_OF_FORMAT = '@')
*************************************************************************************/
void gen_bkg_options_edit( gen_bkg_opts *go, gen_bkg_fmt *format, ... );
//a tool to easily build the format from a wide string
gen_bkg_fmt *gen_bkg_format_alloc( const int* opt_str );
void gen_bkg_format_free( gen_bkg_fmt* fmt_str ); //and deallocate it
//an helper to allocate the options
//the format string is the same as above.
gen_bkg_opts *gen_bkg_options_alloc();
//and the correspondig free
void gen_bkg_options_free( gen_bkg_opts* go );

//helper functions to allocate and deallocate the histograms
gen_bkg_hists *gen_bkg_histograms_alloc( gen_bkg_opts *go );
void gen_bkg_histograms_free( gen_bkg_hists *hists );

#endif
